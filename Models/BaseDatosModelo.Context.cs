//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAppDermatologia.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DermatologiaEntities : DbContext
    {
        public DermatologiaEntities()
            : base("name=DermatologiaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<HistoriaClinica> HistoriaClinica { get; set; }
        public virtual DbSet<Paciente> Paciente { get; set; }
        public virtual DbSet<Reserva> Reserva { get; set; }
    
        public virtual ObjectResult<buscar_empleado_Result> buscar_empleado(string letra)
        {
            var letraParameter = letra != null ?
                new ObjectParameter("letra", letra) :
                new ObjectParameter("letra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<buscar_empleado_Result>("buscar_empleado", letraParameter);
        }
    
        public virtual ObjectResult<buscar_HistoriaClinica_Result> buscar_HistoriaClinica(string idPaciente)
        {
            var idPacienteParameter = idPaciente != null ?
                new ObjectParameter("idPaciente", idPaciente) :
                new ObjectParameter("idPaciente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<buscar_HistoriaClinica_Result>("buscar_HistoriaClinica", idPacienteParameter);
        }
    
        public virtual ObjectResult<buscar_paciente_Result> buscar_paciente(string letra)
        {
            var letraParameter = letra != null ?
                new ObjectParameter("letra", letra) :
                new ObjectParameter("letra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<buscar_paciente_Result>("buscar_paciente", letraParameter);
        }
    
        public virtual ObjectResult<buscar_reserva_Result> buscar_reserva(string num)
        {
            var numParameter = num != null ?
                new ObjectParameter("num", num) :
                new ObjectParameter("num", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<buscar_reserva_Result>("buscar_reserva", numParameter);
        }
    
        public virtual int editar_empleado(string login, string password, string rol, string nombre, string apellido, string correo, string telefono, string cedula)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var rolParameter = rol != null ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editar_empleado", loginParameter, passwordParameter, rolParameter, nombreParameter, apellidoParameter, correoParameter, telefonoParameter, cedulaParameter);
        }
    
        public virtual int editar_HistoriaClinica(Nullable<int> id, string alergias, string enfermedades, string observaciones, byte[] foto)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var alergiasParameter = alergias != null ?
                new ObjectParameter("Alergias", alergias) :
                new ObjectParameter("Alergias", typeof(string));
    
            var enfermedadesParameter = enfermedades != null ?
                new ObjectParameter("Enfermedades", enfermedades) :
                new ObjectParameter("Enfermedades", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("foto", foto) :
                new ObjectParameter("foto", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editar_HistoriaClinica", idParameter, alergiasParameter, enfermedadesParameter, observacionesParameter, fotoParameter);
        }
    
        public virtual int editar_paciente(string cedula, string nombre, string apellido, string telefono, string correo, string direccion, string sexo)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editar_paciente", cedulaParameter, nombreParameter, apellidoParameter, telefonoParameter, correoParameter, direccionParameter, sexoParameter);
        }
    
        public virtual int editar_reserva(Nullable<int> id_res, string idpaciente, Nullable<System.DateTime> fecha, string servicio, string observaciones, string estado)
        {
            var id_resParameter = id_res.HasValue ?
                new ObjectParameter("id_res", id_res) :
                new ObjectParameter("id_res", typeof(int));
    
            var idpacienteParameter = idpaciente != null ?
                new ObjectParameter("idpaciente", idpaciente) :
                new ObjectParameter("idpaciente", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var servicioParameter = servicio != null ?
                new ObjectParameter("servicio", servicio) :
                new ObjectParameter("servicio", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editar_reserva", id_resParameter, idpacienteParameter, fechaParameter, servicioParameter, observacionesParameter, estadoParameter);
        }
    
        public virtual int eliminar_empleado(string cedula)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminar_empleado", cedulaParameter);
        }
    
        public virtual int eliminar_HistoriaClinica(Nullable<int> idPaciente)
        {
            var idPacienteParameter = idPaciente.HasValue ?
                new ObjectParameter("idPaciente", idPaciente) :
                new ObjectParameter("idPaciente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminar_HistoriaClinica", idPacienteParameter);
        }
    
        public virtual int eliminar_paciente(string cedula)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminar_paciente", cedulaParameter);
        }
    
        public virtual int eliminar_reserva(Nullable<int> id_res)
        {
            var id_resParameter = id_res.HasValue ?
                new ObjectParameter("id_res", id_res) :
                new ObjectParameter("id_res", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminar_reserva", id_resParameter);
        }
    
        public virtual int ingresar_reserva(string idpaciente, Nullable<System.DateTime> fecha, string servicio, string observaciones, string estado)
        {
            var idpacienteParameter = idpaciente != null ?
                new ObjectParameter("idpaciente", idpaciente) :
                new ObjectParameter("idpaciente", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var servicioParameter = servicio != null ?
                new ObjectParameter("servicio", servicio) :
                new ObjectParameter("servicio", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ingresar_reserva", idpacienteParameter, fechaParameter, servicioParameter, observacionesParameter, estadoParameter);
        }
    
        public virtual int insertar_empleado(string login, string password, string rol, string nombre, string apellido, string correo, string telefono, string cedula)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var rolParameter = rol != null ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertar_empleado", loginParameter, passwordParameter, rolParameter, nombreParameter, apellidoParameter, correoParameter, telefonoParameter, cedulaParameter);
        }
    
        public virtual int insertar_historia(string iDPaciente, Nullable<System.DateTime> fecha_Nacimiento, string antecedentes_Medicos, string alergias, string enfermedades_Hereditarias, string observaciones, byte[] fotografias)
        {
            var iDPacienteParameter = iDPaciente != null ?
                new ObjectParameter("IDPaciente", iDPaciente) :
                new ObjectParameter("IDPaciente", typeof(string));
    
            var fecha_NacimientoParameter = fecha_Nacimiento.HasValue ?
                new ObjectParameter("Fecha_Nacimiento", fecha_Nacimiento) :
                new ObjectParameter("Fecha_Nacimiento", typeof(System.DateTime));
    
            var antecedentes_MedicosParameter = antecedentes_Medicos != null ?
                new ObjectParameter("Antecedentes_Medicos", antecedentes_Medicos) :
                new ObjectParameter("Antecedentes_Medicos", typeof(string));
    
            var alergiasParameter = alergias != null ?
                new ObjectParameter("Alergias", alergias) :
                new ObjectParameter("Alergias", typeof(string));
    
            var enfermedades_HereditariasParameter = enfermedades_Hereditarias != null ?
                new ObjectParameter("Enfermedades_Hereditarias", enfermedades_Hereditarias) :
                new ObjectParameter("Enfermedades_Hereditarias", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            var fotografiasParameter = fotografias != null ?
                new ObjectParameter("Fotografias", fotografias) :
                new ObjectParameter("Fotografias", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertar_historia", iDPacienteParameter, fecha_NacimientoParameter, antecedentes_MedicosParameter, alergiasParameter, enfermedades_HereditariasParameter, observacionesParameter, fotografiasParameter);
        }
    
        public virtual int insertar_HistoriaClinica(string idPaciente, Nullable<System.DateTime> fecha, string antecendentes, string alergias, string enfermedades, string observaciones, byte[] foto)
        {
            var idPacienteParameter = idPaciente != null ?
                new ObjectParameter("idPaciente", idPaciente) :
                new ObjectParameter("idPaciente", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var antecendentesParameter = antecendentes != null ?
                new ObjectParameter("Antecendentes", antecendentes) :
                new ObjectParameter("Antecendentes", typeof(string));
    
            var alergiasParameter = alergias != null ?
                new ObjectParameter("Alergias", alergias) :
                new ObjectParameter("Alergias", typeof(string));
    
            var enfermedadesParameter = enfermedades != null ?
                new ObjectParameter("Enfermedades", enfermedades) :
                new ObjectParameter("Enfermedades", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("foto", foto) :
                new ObjectParameter("foto", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertar_HistoriaClinica", idPacienteParameter, fechaParameter, antecendentesParameter, alergiasParameter, enfermedadesParameter, observacionesParameter, fotoParameter);
        }
    
        public virtual int insertar_paciente(string cedula, string nombre, string apellido, string telefono, string correo, string direccion, string sexo)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertar_paciente", cedulaParameter, nombreParameter, apellidoParameter, telefonoParameter, correoParameter, direccionParameter, sexoParameter);
        }
    
        public virtual ObjectResult<mostrar_empleado_Result> mostrar_empleado()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mostrar_empleado_Result>("mostrar_empleado");
        }
    
        public virtual ObjectResult<mostrar_HistoriaClinica_Result> mostrar_HistoriaClinica()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mostrar_HistoriaClinica_Result>("mostrar_HistoriaClinica");
        }
    
        public virtual ObjectResult<mostrar_paciente_Result> mostrar_paciente()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mostrar_paciente_Result>("mostrar_paciente");
        }
    
        public virtual ObjectResult<mostrar_reserva_Result> mostrar_reserva()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mostrar_reserva_Result>("mostrar_reserva");
        }
    }
}
